{"version":3,"sources":["bg-index.jpg","graph.png","calculateLogic.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","OPS","Calculate","expressionStack","graph","resultVar1","resultVar2","symbol","item","shift","includes","rootNode","getRootNode","letterinList","expression1","j","length","push","rootNode1","adjacents1","getAdjacents","i","setRootNode","expression2","rootNode2","adjacents2","console","log","Graph","Object","classCallCheck","this","AdjList","Map","EdgeLabel","LetterList","v","set","w","agent","get","addAgent","edge","concat","letter","index","indexOf","splice","adj","correctAdj","getAgent","get_keys","keys","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","get_values","get_letters","conc","letters","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","err","return","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","App","_this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","logic","target","result","getResult","state","replace","toUpperCase","variables","parseExpression","exp","parenthesisExp","slice","changeRootNode","changeLetters","vertice","removeLetter","addLetter","vertices","addVertex","addEdge","_this2","_this$state","react_default","a","createElement","className","style","backgroundColor","src","logo","alt","index_es","variant","elevation","paddingTop","paddingBottom","display","component","textAlign","fontSize","paddingLeft","grafo","width","aria-label","name","onChange","row","map","key","control","color","label","labelPlacement","checked","fontWeight","id","margin","marginRight","marginLeft","marginTop","maxWidth","onClick","error","disabled","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.766303a0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg-index.be70d7dd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/graph.f94adfa7.png\";","//Operadoes usados na operacao\n// ^ -> e\n// V -> ou\n// ➡ -> implica\n// ~ -> not\n// []a -> para todo vizinho que tem o agente 'a' (na aresta de ligação)\n// <>a -> algum vizinho que tem o agente 'a' (na aresta de ligação)\nconst OPS = ['^', 'V', '~', '➡', '[','<']\n\n//Define se um valor e ou nao um operador\nconst IsOperator = (symbol) => {\n    return OPS.includes(symbol)\n}\n\n//Recebe a expressao como uma pilha com os operadores e valores. Ex. exp = [\"➡\",\"~\",\"A\",\"B\"] => ~A➡B(Notacao normal) = ➡~AB(Notacao polonesa)\nconst Calculate = (expressionStack, graph) => {\n    let item = expressionStack.shift()\n    let resultVar1\n    let resultVar2\n    if (!IsOperator(item)){\n        const rootNode = graph.getRootNode()\n        return graph.letterinList(rootNode, item)\n    }\n    else{\n        switch(item){\n            case \"[\":\n                expressionStack.shift()\n                let expression1 = []\n                for (let j = 0; j < expressionStack.length; j++){\n                    expression1.push(expressionStack[j])\n                }\n                const rootNode1 = graph.getRootNode()\n                const adjacents1 = graph.getAdjacents(rootNode1,expression1[0])\n                expressionStack.shift()\n                expression1.shift()\n                if (adjacents1.length === 0){\n                    Calculate(expressionStack, graph)\n                    //sumidouro para todo é true\n                    return false\n                }\n                for (let i = 0; i < adjacents1.length; i++){\n                    graph.setRootNode(adjacents1[i])\n                    if (!Calculate(expressionStack, graph)){\n                        graph.setRootNode(rootNode1)\n                        return false\n                    }\n                    if (i !== adjacents1.length)\n                        expressionStack = expression1\n                }\n                graph.setRootNode(rootNode1)\n                return true\n            case \"<\":\n                expressionStack.shift()\n                let expression2 = []\n                for (let j = 0; j < expressionStack.length; j++){\n                    expression2.push(expressionStack[j])\n                }\n                const rootNode2 = graph.getRootNode()\n                const adjacents2 = graph.getAdjacents(rootNode2,expression2[0])\n                expressionStack.shift()\n                expression2.shift()\n                if (adjacents2.length === 0){\n                    Calculate(expressionStack, graph)\n                    return false\n                }\n                for (let i = 0; i < adjacents2.length; i++){\n                    graph.setRootNode(adjacents2[i])\n                    if (Calculate(expressionStack, graph)){\n                        graph.setRootNode(rootNode2)\n                        return true\n                    }\n                    if (i !== adjacents2.length)\n                        expressionStack = expression2\n                }\n                graph.setRootNode(rootNode2)\n                return false\n            case \"^\":\n                resultVar1 = Calculate(expressionStack, graph)\n                resultVar2 = Calculate(expressionStack, graph)\n                return resultVar1 && resultVar2\n            case \"V\":\n                resultVar1 = Calculate(expressionStack, graph) \n                resultVar2 = Calculate(expressionStack, graph)\n                return resultVar1 || resultVar2\n            case \"~\":\n                return !Calculate(expressionStack, graph)\n            case \"➡\":\n                resultVar1 = !Calculate(expressionStack, graph)\n                resultVar2 = Calculate(expressionStack, graph)\n                return resultVar1 || resultVar2\n            default:\n                console.log('Símbolo não reconhecido')\n        }\n    }\n}\n\nexport default Calculate;","import React, { Component } from 'react';\nimport logo from './bg-index.jpg';\nimport grafo from './graph.png';\nimport Calculate from './calculateLogic';\nimport { \n  Divider,\n  FormControl,\n  Button,\n  TextField,\n  Paper,\n  FormLabel,\n  RadioGroup,\n  FormControlLabel,\n  Radio,\n  FormGroup,\n  Checkbox\n} from '@material-ui/core';\nimport './App.css';\n\nclass Graph {\n  constructor(){\n      this.AdjList = new Map();\n      this.EdgeLabel = new Map();\n      this.LetterList = new Map();\n      this.rootNode = '';\n  }\n\n  setRootNode(v){\n    this.rootNode = v;\n  }\n\n  getRootNode(){\n    return this.rootNode\n  }\n\n  addVertex(v){ \n    this.AdjList.set(v, []); \n    this.LetterList.set(v, []);\n  }\n\n  addEdge(v, w, agent){ \n    this.AdjList.get(v).push(w);\n    this.addAgent(v,w,agent)\n  }\n\n  addAgent(v,w,agent){\n    let edge = v.concat(w)\n    this.EdgeLabel.set(edge,agent)\n  }\n\n  addLetter(v, letter){\n    this.LetterList.get(v).push(letter)\n  }\n\n  removeLetter(v, letter){\n    let index = this.LetterList.get(v).indexOf(letter)\n    this.LetterList.get(v).splice(index,1)\n  }\n\n  getAgent(v,w,letter){\n    let edge = v.concat(w)\n    if (this.EdgeLabel.get(edge) !== letter){\n      return false\n    }\n    return true\n  }\n\n  getAdjacents(v, letter){\n    let adj = this.AdjList.get(v)\n    let correctAdj = []\n    for (let i = 0; i < adj.length; i++){\n      if (this.getAgent(v,adj[i],letter))\n        correctAdj.push(adj[i])\n    }\n    return correctAdj\n  }\n\n  letterinList(v,letter){\n    return this.LetterList.get(v).includes(letter)\n  }\n\n  printGraph(){ \n      var get_keys = this.AdjList.keys(); \n    \n      for (var i of get_keys)  \n      { \n          var get_values = this.AdjList.get(i);\n          var get_letters = this.LetterList.get(i);\n          var conc = \"\";\n          var letters = \"\";\n    \n          for (var j of get_values)\n            conc += j + \" \";\n            \n          for (var k of get_letters)\n            letters += k + \" \";\n    \n          console.log(i + \" -> \" + conc + \" -> \" + letters); \n      } \n  } \n}\n\nexport function parseExpression(exp){\n  let result = ''\n  for (let i = 0; i < exp.length; i++){\n    if (exp[i] === '('){\n      let newExp = exp.slice(i+1, exp.length)\n      let parenthesisExp = parseExpression(newExp)\n      i += parenthesisExp.length + 1\n      result = result.concat(parenthesisExp)\n    }\n    else {\n      if (exp[i] === ')'){\n        return result\n      }\n      if (['➡','^','V'].includes(exp[i]))\n        result = exp[i].concat(result)\n      else{\n        result = result.concat(exp[i])\n      }\n    }\n  }\n  return result\n}\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state ={\n      logic: \"\",\n      result: \"\",\n      variables: [],\n      rootNode: 's1',\n      vertices: ['s1','s2','s3','s4','s5'],\n      graph: new Graph()\n    }\n  }\n\n  componentDidMount(){\n    let {graph} = this.state\n    graph.addVertex('s1')\n    graph.addVertex('s2')\n    graph.addVertex('s3')\n    graph.addVertex('s4')\n    graph.addVertex('s5')\n    graph.addEdge('s1', 's2','A'); \n    graph.addEdge('s1', 's3','A'); \n    graph.addEdge('s2', 's4','B');\n    graph.addEdge('s3', 's5','C');\n    graph.addEdge('s4', 's5','A');\n    graph.setRootNode('s1')\n    this.setState({graph})\n  }\n\n  handleChange = event => {\n    this.setState({\n      logic: event.target.value,\n      result: \"\"\n    });\n  };\n\n  getResult = () => {\n    let logic = this.state.logic.replace(/ /g,'').toUpperCase()\n    let {graph} = this.state\n    let result = []\n    let variables = []\n\n    logic = parseExpression(logic)\n\n    for (let i = 0; i < logic.length; i++){\n      if (!['V','^','➡','~','<','>','[',']','A','B','C'].includes(logic[i]) && !variables.includes(logic[i])){\n        variables.push(logic[i])\n      }\n      result.push(logic[i])\n    }\n\n    this.setState({\n      result: Calculate(result, graph),\n      variables\n    });\n  }\n\n  changeRootNode = event => {\n    let rootNode = event.target.value\n    let {graph} = this.state\n    graph.setRootNode(rootNode)\n    this.setState({\n      rootNode,\n      graph\n    })\n  }\n\n  changeLetters = (letter, vertice) => event => {\n    let {graph} = this.state\n    !graph.letterinList(vertice, letter) ? graph.addLetter(vertice, letter) :\n      graph.removeLetter(vertice, letter)\n    this.setState({\n      graph\n    })\n  }\n\n  render() {\n    let {vertices, variables, graph} = this.state\n    return (\n      <div className=\"App\" style={{backgroundColor: '#efeeee'}}>\n        <div className=\"crop\">\n          <img src={logo} alt=\"logProg\"/>\n        </div>\n        <Divider variant=\"middle\" />\n        <h2>Trabalho de Lógica em Programação</h2>\n        <Paper elevation={2} style={{paddingTop: 20, paddingBottom: 20}}>\n          <div style={{display: 'inline-grid'}}>\n          <FormLabel component=\"legend\" style={{textAlign: 'left', fontSize: 14, paddingLeft: 15}}>Grafo</FormLabel>\n              <img src={grafo} alt=\"grafo\" style={{width: 380}}/>\n              <FormControl component=\"fieldset\">\n                <FormLabel component=\"legend\" style={{textAlign: 'left', fontSize: 14, paddingLeft: 15}}>Nó Raiz</FormLabel>\n                <RadioGroup\n                  aria-label=\"rootNode\"\n                  name=\"rootNode\"\n                  style={{paddingLeft: 20}}\n                  value={this.state.rootNode}\n                  onChange={this.changeRootNode}\n                  row\n                >\n                  {vertices.map(item => (\n                    <FormControlLabel\n                      key={item}\n                      value={item}\n                      control={<Radio color=\"primary\"/>}\n                      label={item}\n                      labelPlacement=\"end\"\n                    />\n                  ))}\n                </RadioGroup>\n              </FormControl>\n              {variables.map(item => (\n                <Paper key={item} elevation={2} style={{paddingTop: 20, paddingBottom: 20}}>\n                  <FormLabel component=\"legend\" style={{textAlign: 'left', fontSize: 14, paddingLeft: 15}}>Vértices que tem {item}:</FormLabel>\n                  <FormGroup row style={{paddingLeft: 15}}>\n                    {vertices.map(vertice => (\n                      <FormControlLabel\n                        key={vertice}\n                        control={\n                          <Checkbox\n                            checked={graph.letterinList(vertice, item)}\n                            onChange={this.changeLetters(item, vertice)}\n                            value={vertice}\n                          />\n                        }\n                        label={vertice}\n                      />\n                    ))}\n                  </FormGroup>\n                </Paper>\n            ))}\n            <p style={{textAlign: \"left\", fontWeight: \"bold\"}}>{'Não utilize as letras a, b e c na lógica como símbolos proposicionais'}</p>\n            <TextField\n              id=\"logic\"\n              label=\"Lógica\"\n              onChange={this.handleChange}\n              margin=\"normal\"\n              variant=\"outlined\"\n              style={{marginRight: 50, marginLeft: 10}}\n            />\n            {/* <p>{`Use v para 'ou',\n            ^ para 'e',\n            ➡ para 'implica',\n            ~ para 'negação',`}</p>\n            <p>{`[]a para 'para todo vizinho que contém o agente 'a' na aresta de ligação' e\n            <>a para 'existe um vizinho entre os que contém o agente 'a' na aresta de ligação'`}</p> */}\n            <Button variant=\"contained\" color=\"default\" style={{marginTop: 25, maxWidth: 380}} onClick={this.getResult}>\n              VERIFICAR RESULTADO\n            </Button>\n            <TextField\n              error\n              disabled\n              id=\"result\"\n              label=\"Resultado\"\n              style={{width: 320, marginLeft: 10}}\n              value={this.state.result}\n              margin=\"normal\"\n              variant=\"outlined\"\n            />\n          </div>\n        </Paper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.register();\n"],"sourceRoot":""}